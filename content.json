{"meta":{"title":"Jie-Think","subtitle":null,"description":"jie blog","author":"jie","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-08-29T12:07:03.000Z","updated":"2018-08-29T12:11:52.380Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-29T12:11:19.000Z","updated":"2018-08-29T12:11:36.698Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"个人软件安装记录(linux-ubuntu)","slug":"self_doc/个人软件安装记录-linux","date":"2018-09-04T01:51:07.000Z","updated":"2018-09-04T01:52:22.517Z","comments":true,"path":"2018/09/04/self_doc/个人软件安装记录-linux/","link":"","permalink":"http://yoursite.com/2018/09/04/self_doc/个人软件安装记录-linux/","excerpt":"","text":"12345apt-get install -y gitapt-get install -y treeapt-get install -y wget","categories":[],"tags":[{"name":"tools安装","slug":"tools安装","permalink":"http://yoursite.com/tags/tools安装/"}]},{"title":"Learn CSS Grid","slug":"frontend/css/grid_learn/learn_css_grid","date":"2018-09-02T02:38:47.663Z","updated":"2018-09-02T11:42:15.520Z","comments":true,"path":"2018/09/02/frontend/css/grid_learn/learn_css_grid/","link":"","permalink":"http://yoursite.com/2018/09/02/frontend/css/grid_learn/learn_css_grid/","excerpt":"","text":"视频教程推荐(建议先看一些基础概念): https://scrimba.com/g/gR8PTE简单教程: https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228详细教程: https://learncssgrid.com/ 该内容主要来自:https://scrimba.com/g/gR8PTE and https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228 重要术语解释参考: https://www.jianshu.com/p/d183265a8dad 网格容器（Grid Container）元素应用display:grid，它是其所有网格项的父元素。下面例子container就是网格容器。 12345&lt;div class=\"container\"&gt; &lt;div class=\"item item-1\"&gt;&lt;/div&gt; &lt;div class=\"item item-2\"&gt;&lt;/div&gt; &lt;div class=\"item item-3\"&gt;&lt;/div&gt;&lt;/div&gt; 网格项（Grid Item） 网格容器的子元素，下面的item元素是网格项，但sub-item不是。1234567&lt;div class=\"container\"&gt; &lt;div class=\"item\"&gt;&lt;/div&gt; &lt;div class=\"item\"&gt; &lt;p class=\"sub-item\"&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=\"item\"&gt;&lt;/div&gt;&lt;/div&gt; 网格线（Grid Line） 组成网格线的分界线。它们可以是列网格线（column grid lines），也可以是行网格线（row grid lines）并且居于行或列的任意一侧，下面黄色线就是列网格线。 网格轨道（Grid Track）两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。 网格单元（Grid Cell）两个相邻的列网格线和两个相邻的行网格线组成的是网格单元，它是最小的网格单元。下面行网格线1（row grid lines 1）、行网格线2（row grid lines 2）和列网格线2（column grid lines 2）、列网格线3（column grid lines 3）组成的黄色区域为网格单元。 网格区（Grid Area）网格区是由任意数量网格单元组成，下面行网格线1（row grid lines 1）、行网格线3（row grid lines 3）和列网格线1（column grid lines 1）、列网格线3（column grid lines3）组成的黄色区域为网格区。 第一个 grid 布局 The two core ingredients of a CSS Grid are the wrapper (parent) and the items (children). The wrapper is the actual grid and the items are the content inside the grid.CSS Grid的两个核心组成部分是包装器（父）和项（子）。 包装器是实际网格，项目是网格内的内容。 12345678&lt;div class=\"wrapper\"&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt;&lt;/div&gt; 123.wrapper &#123; display: grid;&#125; result: Columns and rows12345.wrapper &#123; display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 50px 50px;&#125; 12345.wrapper &#123; display: grid; grid-template-columns: 200px 50px 100px; grid-template-rows: 100px 30px;&#125; items1234.item1 &#123; grid-column-start: 1; grid-column-end: 4;&#125; 123.item1 &#123; grid-column: 1 / 4;&#125;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://yoursite.com/categories/frontend/"},{"name":"learn notebook","slug":"frontend/learn-notebook","permalink":"http://yoursite.com/categories/frontend/learn-notebook/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"css grid","slug":"css-grid","permalink":"http://yoursite.com/tags/css-grid/"}]},{"title":"markfile start learn","slug":"backend/tools/markfile_start_learn","date":"2018-09-01T07:37:28.000Z","updated":"2018-09-01T10:05:44.866Z","comments":true,"path":"2018/09/01/backend/tools/markfile_start_learn/","link":"","permalink":"http://yoursite.com/2018/09/01/backend/tools/markfile_start_learn/","excerpt":"","text":"参考: https://www.cnblogs.com/wang_yb/p/3990952.html Makefile 简介Makefile 是和 make 命令一起配合使用的. 很多大型项目的编译都是通过 Makefile 来组织的, 如果没有 Makefile, 那很多项目中各种库和代码之间的依赖关系不知会多复杂. Makefile的组织流程的能力如此之强, 不仅可以用来编译项目, 还可以用来组织我们平时的一些日常操作. 这个需要大家发挥自己的想象力. Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)Makefile基本格式如下: 1234target ... : prerequisites ... command ... ... 其中, target - 目标文件, 可以是 Object File, 也可以是可执行文件 prerequisites - 生成 target 所需要的文件或者目标 command - make需要执行的命令 (任意的shell命令), Makefile中的命令必须以 [tab] 开头 显示规则 :: 说明如何生成一个或多个目标文件(包括 生成的文件, 文件的依赖文件, 生成的命令) 隐晦规则 :: make的自动推导功能所执行的规则 变量定义 :: Makefile中定义的变量 文件指示 :: Makefile中引用其他Makefile; 指定Makefile中有效部分; 定义一个多行命令 注释 :: Makefile只有行注释 “#”, 如果要使用或者输出”#”字符, 需要进行转义, “#“ 1.2 GNU make 的工作方式 读入主Makefile (主Makefile中可以引用其他Makefile) 读入被include的其他Makefile 初始化文件中的变量 推导隐晦规则, 并分析所有规则 为所有的目标文件创建依赖关系链 根据依赖关系, 决定哪些目标要重新生成 执行生成命令 实例解析","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"build tools","slug":"build-tools","permalink":"http://yoursite.com/tags/build-tools/"}]},{"title":"apidoc start learn","slug":"backend/tools/apidoc_start_learn","date":"2018-08-31T08:02:53.000Z","updated":"2018-09-01T07:37:58.024Z","comments":true,"path":"2018/08/31/backend/tools/apidoc_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/31/backend/tools/apidoc_start_learn/","excerpt":"","text":"参考: http://apidocjs.com/ DemoJavadoc-Style (can be used in C#, Go, Dart, Java, JavaScript, PHP, TypeScript and all other Javadoc capable languages): 12345678910/** * @api &#123;get&#125; /user/:id Request User information * @apiName GetUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * * @apiSuccess &#123;String&#125; firstname Firstname of the User. * @apiSuccess &#123;String&#125; lastname Lastname of the User. */ install1npm install apidoc -g Run1apidoc -i myapp/ -o apidoc/ -t mytemplate/ Configuration (apidoc.json)ex:1234567&#123; \"name\": \"example\", \"version\": \"0.1.0\", \"description\": \"apiDoc basic example\", \"title\": \"Custom apiDoc browser title\", \"url\" : \"https://api.github.com/v1\"&#125; Header / Footer12345678910&#123; \"header\": &#123; \"title\": \"My own header title\", \"filename\": \"header.md\" &#125;, \"footer\": &#123; \"title\": \"My own footer title\", \"filename\": \"footer.md\" &#125;&#125; Basicapidoc.json 12345&#123; \"name\": \"example\", \"version\": \"0.1.0\", \"description\": \"A basic apiDoc example\"&#125; example.js 12345678910111213141516171819202122232425/** * @api &#123;get&#125; /user/:id Request User information * @apiName GetUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * * @apiSuccess &#123;String&#125; firstname Firstname of the User. * @apiSuccess &#123;String&#125; lastname Lastname of the User. * * @apiSuccessExample Success-Response: * HTTP/1.1 200 OK * &#123; * \"firstname\": \"John\", * \"lastname\": \"Doe\" * &#125; * * @apiError UserNotFound The id of the User was not found. * * @apiErrorExample Error-Response: * HTTP/1.1 404 Not Found * &#123; * \"error\": \"UserNotFound\" * &#125; */ 继承12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * @apiDefine UserNotFoundError * * @apiError UserNotFound The id of the User was not found. * * @apiErrorExample Error-Response: * HTTP/1.1 404 Not Found * &#123; * \"error\": \"UserNotFound\" * &#125; *//** * @api &#123;get&#125; /user/:id Request User information * @apiName GetUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * * @apiSuccess &#123;String&#125; firstname Firstname of the User. * @apiSuccess &#123;String&#125; lastname Lastname of the User. * * @apiSuccessExample Success-Response: * HTTP/1.1 200 OK * &#123; * \"firstname\": \"John\", * \"lastname\": \"Doe\" * &#125; * * @apiUse UserNotFoundError *//** * @api &#123;put&#125; /user/ Modify User information * @apiName PutUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * @apiParam &#123;String&#125; [firstname] Firstname of the User. * @apiParam &#123;String&#125; [lastname] Lastname of the User. * * @apiSuccessExample Success-Response: * HTTP/1.1 200 OK * * @apiUse UserNotFoundError */ Versioning1234567891011121314151617181920212223242526/** * @api &#123;get&#125; /user/:id Get User information * @apiVersion 0.1.0 * @apiName GetUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * * @apiSuccess &#123;String&#125; firstname Firstname of the User. * @apiSuccess &#123;String&#125; lastname Lastname of the User. * * @apiSuccessExample Success-Response: * HTTP/1.1 200 OK * &#123; * \"firstname\": \"John\", * \"lastname\": \"Doe\" * &#125; * * @apiError UserNotFound The id of the User was not found. * * @apiErrorExample Error-Response: * HTTP/1.1 404 Not Found * &#123; * \"error\": \"UserNotFound\" * &#125; */ 123456789101112131415161718192021222324252627/** * @api &#123;get&#125; /user/:id Get User information and Date of Registration. * @apiVersion 0.2.0 * @apiName GetUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * * @apiSuccess &#123;String&#125; firstname Firstname of the User. * @apiSuccess &#123;String&#125; lastname Lastname of the User. * @apiSuccess &#123;Date&#125; registered Date of Registration. * * @apiSuccessExample Success-Response: * HTTP/1.1 200 OK * &#123; * \"firstname\": \"John\", * \"lastname\": \"Doe\" * &#125; * * @apiError UserNotFound The id of the User was not found. * * @apiErrorExample Error-Response: * HTTP/1.1 404 Not Found * &#123; * \"error\": \"UserNotFound\" * &#125; */ 该版本可用于每个块，也可用于继承块。您不必更改继承块上的版本，解析器会自动检查最近的前任. apiDoc-Params列几个常用的标签: @api1@api &#123;method&#125; path [title] Required!Without that indicator, apiDoc parser ignore the documentation block. (apidoc 工具的标识开始) @apiName1@apiName name @apiGroup1@apiGroup name @apiDefine12@apiDefine name [title] [description] @apiUse1@apiUse name @apiDeprecated1@apiDeprecated [text] Ex:12345678910/** * @apiDeprecated *//** * @apiDeprecated use now (#Group:Name). * * Example: to set a link to the GetDetails method of your group User * write (#User:GetDetails) */ @apiDescription1@apiDescription text Ex:123456/** * @apiDescription This is the Description. * It is multiline capable. * * Last line of Description. */ @apiParam1@apiParam [(group)] [&#123;type&#125;] [field=defaultValue] [description] 12345678910111213141516/** * @api &#123;get&#125; /user/:id * @apiParam &#123;Number&#125; id Users unique ID. *//** * @api &#123;post&#125; /user/ * @apiParam &#123;String&#125; [firstname] Optional Firstname of the User. * @apiParam &#123;String&#125; lastname Mandatory Lastname. * @apiParam &#123;String&#125; country=\"DE\" Mandatory with default value \"DE\". * @apiParam &#123;Number&#125; [age=18] Optional Age with default 18. * * @apiParam (Login) &#123;String&#125; pass Only logged in users can post this. * In generated documentation a separate * \"Login\" Block will be generated. */ Name Description (group) All parameters will be grouped by this name. Without a group, the default Parameter is set.You can set a title and description with @apiDefine. {type} Parameter type, e.g. {Boolean}, {Number}, {String}, {Object}, {String[]} (array of strings), … {type{size}} Information about the size of the variable.{string{..5}} a string that has max 5 chars.{string{2..5}} a string that has min. 2 chars and max 5 chars.{number{100-999}} a number between 100 and 999. {type=allowedValues} Information about allowed values of the variable.{string=&quot;small&quot;} a string that can only contain the word “small” (a constant).{string=&quot;small&quot;,&quot;huge&quot;} a string that can contain the words “small” or “huge”.{number=1,2,3,99} a number with allowed values of 1, 2, 3 and 99.Can be combined with size:{string {..5}=&quot;small&quot;,&quot;huge&quot;} a string that has max 5 chars and only contain the words “small” or “huge”. field Variablename [field] Fieldname with brackets define the Variable as optional. =defaultValue The parameters default value. description Description of the field. @apiParamExample12@apiParamExample [&#123;type&#125;] [title] example 1234567/** * @api &#123;get&#125; /user/:id * @apiParamExample &#123;json&#125; Request-Example: * &#123; * \"id\": 4711 * &#125; */ @apiSuccess1@apiSuccess [(group)] [&#123;type&#125;] field [description] @apiSuccessExample12@apiSuccessExample [&#123;type&#125;] [title] example 123456789/** * @api &#123;get&#125; /user/:id * @apiSuccessExample &#123;json&#125; Success-Response: * HTTP/1.1 200 OK * &#123; * \"firstname\": \"John\", * \"lastname\": \"Doe\" * &#125; */ @apiError1@apiError [(group)] [&#123;type&#125;] field [description] 1234/** * @api &#123;get&#125; /user/:id * @apiError UserNotFound The &lt;code&gt;id&lt;/code&gt; of the User was not found. */ @apiErrorExample12@apiErrorExample [&#123;type&#125;] [title] example 12345678/** * @api &#123;get&#125; /user/:id * @apiErrorExample &#123;json&#125; Error-Response: * HTTP/1.1 404 Not Found * &#123; * \"error\": \"UserNotFound\" * &#125; */","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"apidoc","slug":"apidoc","permalink":"http://yoursite.com/tags/apidoc/"},{"name":"learn","slug":"learn","permalink":"http://yoursite.com/tags/learn/"}]},{"title":"个人软件安装记录(mac osx)","slug":"self_doc/个人软件安装记录","date":"2018-08-31T07:54:58.000Z","updated":"2018-09-04T01:50:30.633Z","comments":true,"path":"2018/08/31/self_doc/个人软件安装记录/","link":"","permalink":"http://yoursite.com/2018/08/31/self_doc/个人软件安装记录/","excerpt":"","text":"tree installdate: 2018-08-29 00:00:00cmd: brew install tree apidoc installdate: 2018-08-31 15:56:41cmd: npm install apidoc -g","categories":[],"tags":[{"name":"tools安装","slug":"tools安装","permalink":"http://yoursite.com/tags/tools安装/"}]},{"title":"docker 构建最小 go app","slug":"backend/docker/docker_构建最小_go_app","date":"2018-08-30T05:56:07.000Z","updated":"2018-08-30T08:27:38.128Z","comments":true,"path":"2018/08/30/backend/docker/docker_构建最小_go_app/","link":"","permalink":"http://yoursite.com/2018/08/30/backend/docker/docker_构建最小_go_app/","excerpt":"","text":"参考: https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/ 写应用1234567891011121314151617181920212223package mainimport ( \"fmt\" \"io/ioutil\" \"net/http\" \"os\")func main() &#123; resp, err := http.Get(\"http://www.baidu.com\") check(err) body, err := ioutil.ReadAll(resp.Body) check(err) fmt.Println(len(body))&#125;func check(err error) &#123; if err != nil &#123; fmt.Println(err) os.Exit(1) &#125;&#125; Dockerizebasic image 1FROM golang:onbuild compile Dockerfile 123456FROM golang:latest RUN mkdir /app ADD . /app/ WORKDIR /app RUN go build -o main . CMD [\"/app/main\"] 这个构建出来需要500M 因为 golang:latest 是从 Debian Jessie 构建出来的, 底层是操作系统, so 导致镜像特别大. Compile!! 先编译工程 构建镜像 12go build -o main .docker build -t example-scratch:v1 -f Dockerfile.scratch . Dockerfile.scratch 内容:123FROM scratchADD main /CMD [\"/main\"] 这样构建是无法工作的, 原因就在于生产的 main 是需要系统的动态链接库. 12$ docker run -it example-scratch:v1standard_init_linux.go:178: exec user process caused \"exec format error\" 解决方法: 1CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main . 禁用cgo，生产一个静态二进制文件, 我们还将操作系统设置为Linux, -a标志意味着重建我们正在使用的所有软件包，这意味着所有导入都将在cgo禁用的情况下重建。 123$ docker build -t example-scratch:v2 -f Dockerfile.scratch .$ docker run -it example-scratch:v2 118146 # it work","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"},{"name":"docker app","slug":"docker-app","permalink":"http://yoursite.com/tags/docker-app/"}]},{"title":"basic css learn - 1. css display grid","slug":"frontend/css/basic_1_0_css_position","date":"2018-08-29T14:03:33.251Z","updated":"2018-08-29T14:47:49.268Z","comments":true,"path":"2018/08/29/frontend/css/basic_1_0_css_position/","link":"","permalink":"http://yoursite.com/2018/08/29/frontend/css/basic_1_0_css_position/","excerpt":"","text":"参考: https://atomiks.github.io/30-seconds-of-css/","categories":[{"name":"frontend","slug":"frontend","permalink":"http://yoursite.com/categories/frontend/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"css grid","slug":"css-grid","permalink":"http://yoursite.com/tags/css-grid/"}]},{"title":"Program for Fibonacci numbers","slug":"alg/DynamicProgramming/1_1_Fibonacci numbers","date":"2018-08-29T13:18:44.000Z","updated":"2018-08-29T13:20:49.056Z","comments":true,"path":"2018/08/29/alg/DynamicProgramming/1_1_Fibonacci numbers/","link":"","permalink":"http://yoursite.com/2018/08/29/alg/DynamicProgramming/1_1_Fibonacci numbers/","excerpt":"","text":"来源：https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/ The Fibonacci numbers are the numbers in the following integer sequence. 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …….. In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation 1Fn = Fn-1 + Fn-2 with seed values 1F0 = 0 and F1 = 1. Given a number n, print n-th Fibonacci Number. 12345Input : n = 2Output : 1Input : n = 9Output : 34","categories":[{"name":"alg","slug":"alg","permalink":"http://yoursite.com/categories/alg/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"}]},{"title":"动态规划题集","slug":"alg/DynamicProgramming/题集","date":"2018-08-29T13:18:44.000Z","updated":"2018-08-29T13:20:52.368Z","comments":true,"path":"2018/08/29/alg/DynamicProgramming/题集/","link":"","permalink":"http://yoursite.com/2018/08/29/alg/DynamicProgramming/题集/","excerpt":"","text":"摘录：https://www.geeksforgeeks.org/dynamic-programming/ ‘Recent Articles’ on Dynamic Programming Topics: Basic Concepts Advanced Concepts Basic Problems Intermediate Problems Hard Problems Quick Links Basic Concepts: Overlapping Subproblems Property Optimal Substructure Property How to solve a Dynamic Programming Problem ? Tabulation vs Memoizatation Advanced Concepts : Bitmasking and Dynamic Programming | Set 1 Digit DP | Introduction Basic Problems : &nbsp;&nbsp; Fibonacci numbers &nbsp;&nbsp; Binomial Coefficient &nbsp;&nbsp; Longest Common Subsequence &nbsp;&nbsp; Longest Repeated Subsequence &nbsp;&nbsp; Largest Sum Contiguous Subarray &nbsp;&nbsp; Ugly numbers &nbsp;&nbsp; Maximum size square sub-matrix with all 1s &nbsp;&nbsp; Longest Increasing Subsequence &nbsp;&nbsp; Min Cost Path &nbsp;&nbsp; Coin change problem &nbsp;&nbsp; Minimum number of edits ( operations ) require to convert string 1 to string 2 &nbsp;&nbsp; Cutting a Rod &nbsp;&nbsp; Subset Sum Problem &nbsp;&nbsp; Minimum number of jumps to reach end &nbsp;&nbsp; Assembly line scheduling &nbsp;&nbsp; Maximum Sum Increasing Subsequence &nbsp;&nbsp; Maximum Length Chain of Pairs &nbsp;&nbsp; Longest Common Substring &nbsp;&nbsp; Count all possible paths from top left to bottom right of a mXn matrix &nbsp;&nbsp; nth Catalan Number &nbsp;&nbsp; Count number of ways to reach a given score in a game &nbsp;&nbsp; Tiling Problem &nbsp;&nbsp; Count even length binary sequences with same sum of first and second half bits &nbsp;&nbsp; Find number of solutions of a linear equation of n variables &nbsp;&nbsp; Bell Numbers (Number of ways to Partition a Set) &nbsp;&nbsp; Compute nCr % p &nbsp;&nbsp; Permutation Coefficient &nbsp;&nbsp; Count number of ways to fill a “n x 4” grid using “1 x 4” tiles &nbsp;&nbsp; A Space Optimized Solution of LCS &nbsp;&nbsp; Find maximum length Snake sequence &nbsp;&nbsp; Minimum cost to fill given weight in a bag &nbsp;&nbsp; Choice of area &nbsp;&nbsp; Maximum weight path ending at any element of last row in a matrix &nbsp;&nbsp; Recursively break a number in 3 parts to get maximum sum &nbsp;&nbsp; Path with maximum average value &nbsp;&nbsp; Maximum sum of pairs with specific difference &nbsp;&nbsp; Maximum subsequence sum such that no three are consecutive &nbsp;&nbsp; Longest subsequence such that difference between adjacents is one &nbsp;&nbsp; Maximum path sum for each position with jumps under divisibility condition &nbsp;&nbsp; Maximum sum Bi-tonic Sub-sequence &nbsp;&nbsp; LCS (Longest Common Subsequence) of three strings &nbsp;&nbsp; Maximum path sum in a triangle &nbsp;&nbsp; Friends Pairing Problem &nbsp;&nbsp; Size of array after repeated deletion of LIS &nbsp;&nbsp; Minimum steps to minimize n as per given condition &nbsp;&nbsp; Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row &nbsp;&nbsp; Gold Mine Problem &nbsp;&nbsp; Find number of endless points &nbsp;&nbsp; Perfect Sum Problem (Print all subsets with given sum) &nbsp;&nbsp; Maximum sum of a path in a Right Number Triangle &nbsp;&nbsp; Subset with sum divisible by m Intermediate Problems : &nbsp;&nbsp; 0-1 Knapsack Problem &nbsp;&nbsp; Length of the longest substring without repeating characters &nbsp;&nbsp; Count number of ways to reach destination in a Maze &nbsp;&nbsp; Super Ugly Number (Number whose prime factors are in given set) &nbsp;&nbsp; Count number of ways to partition a set into k subsets &nbsp;&nbsp; Longest Palindromic Subsequence &nbsp;&nbsp; Egg Dropping Puzzle &nbsp;&nbsp; Weighted job scheduling &nbsp;&nbsp; Longest Bitonic Subsequence &nbsp;&nbsp; Floyd Warshall Algorithm &nbsp;&nbsp; Partition Problem &nbsp;&nbsp; Variations of LIS &nbsp;&nbsp; Box-Stacking Problem &nbsp;&nbsp; Bellman–Ford Algorithm &nbsp;&nbsp; Optimal Binary Search Tree &nbsp;&nbsp; Largest Independent Set Problem &nbsp;&nbsp; Minimum insertions to form a palindrome &nbsp;&nbsp; Minimum number of deletions to make a string palindrome &nbsp;&nbsp; Maximum Product Cutting &nbsp;&nbsp; Clustering/Partitioning an array such that sum of square differences is minimum &nbsp;&nbsp; Maximum decimal value path in a binary matrix &nbsp;&nbsp; Count Derangements (Permutation such that no element appears in its original position) &nbsp;&nbsp; Dice Throw Problem &nbsp;&nbsp; Optimal Strategy for a game &nbsp;&nbsp; Word Break Problem &nbsp;&nbsp; Remove minimum elements from either side such that 2*min becomes more than max &nbsp;&nbsp; Count number of binary strings without consecutive 1’s &nbsp;&nbsp; Count Possible Decodings of a given Digit Sequence &nbsp;&nbsp; Count all possible walks from a source to a destination with exactly k edges &nbsp;&nbsp; Shortest path with exactly k edges in a directed and weighted graph &nbsp;&nbsp; Longest Even Length Substring such that Sum of First and Second Half is same &nbsp;&nbsp; Vertex Cover Problem &nbsp;&nbsp; Find the minimum cost to reach destination using a train &nbsp;&nbsp; Maximum profit by buying and selling a share at most twice &nbsp;&nbsp; Count possible ways to construct buildings &nbsp;&nbsp; Compute sum of digits in all numbers from 1 to n &nbsp;&nbsp; Shortest Common Supersequence &nbsp;&nbsp; Minimum number of coins that make a given value &nbsp;&nbsp; Minimum number of squares whose sum equals to given number n &nbsp;&nbsp; length of the longest consecutive path from a given starting character &nbsp;&nbsp; Total number of non-decreasing numbers with n digits &nbsp;&nbsp; Minimum Initial Points to Reach Destination &nbsp;&nbsp; Count of n digit numbers whose sum of digits equals to given sum &nbsp;&nbsp; Count total number of N digit numbers such that the difference between sum of even and odd digits is 1 &nbsp;&nbsp; Count ways to assign unique cap to every person &nbsp;&nbsp; Longest Repeating Subsequence &nbsp;&nbsp; Find the longest path in a matrix with given constraints &nbsp;&nbsp; Number of paths with exactly k coins &nbsp;&nbsp; Collect maximum coins before hitting a dead end &nbsp;&nbsp; Count number of paths with at-most k turns &nbsp;&nbsp; Partition a set into two subsets such that the difference of subset sums is minimum &nbsp;&nbsp; Longest Zig-Zag Subsequence &nbsp;&nbsp; Largest sum Zigzag sequence in a matrix &nbsp;&nbsp; Count number of subsets having a particular XOR value &nbsp;&nbsp; Weighted Job Scheduling in O(n Log n) time &nbsp;&nbsp; Ways to arrange Balls such that adjacent balls are of different types &nbsp;&nbsp; Minimum time to finish tasks without skipping two consecutive &nbsp;&nbsp; Find if string is K-Palindrome or not | Set 1 &nbsp;&nbsp; Find if string is K-Palindrome or not | Set 2 &nbsp;&nbsp; Wildcard Pattern Matching &nbsp;&nbsp; Longest Common Increasing Subsequence (LCS + LIS) &nbsp;&nbsp; Printing Longest Common Subsequence | Set 2 (Printing All) &nbsp;&nbsp; High-effort vs. Low-effort Tasks Problem &nbsp;&nbsp; Find minimum adjustment cost of an array &nbsp;&nbsp; Find Jobs involved in Weighted Job Scheduling &nbsp;&nbsp; Minimum Cost To Make Two Strings Identical &nbsp;&nbsp; Find number of times a string occurs as a subsequence in given string &nbsp;&nbsp; Count digit groupings of a number with given constraints &nbsp;&nbsp; Non-crossing lines to connect points in a circle &nbsp;&nbsp; Count Distinct Subsequences &nbsp;&nbsp; Find minimum sum such that one of every three consecutive elements is taken &nbsp;&nbsp; Count distinct occurrences as a subsequence &nbsp;&nbsp; Number of permutation with K inversions &nbsp;&nbsp; Print all longest common sub-sequences in lexicographical order &nbsp;&nbsp; Find all distinct subset (or subsequence) sums of an array &nbsp;&nbsp; Count All Palindromic Subsequence in a given String &nbsp;&nbsp; Maximum sum alternating subsequence &nbsp;&nbsp; Sum of average of all subsets &nbsp;&nbsp; Minimum and Maximum values of an expression with * and + &nbsp;&nbsp; Minimum sum subsequence such that at least one of every four consecutive elements is picked &nbsp;&nbsp; Ways to write n as sum of two or more positive integers &nbsp;&nbsp; Unbounded Knapsack (Repetition of items allowed) &nbsp;&nbsp; Finding the maximum square sub-matrix with all equal elements &nbsp;&nbsp; Find Maximum dot product of two arrays with insertion of 0’s &nbsp;&nbsp; Maximum points collected by two persons allowed to meet once &nbsp;&nbsp; Minimum Sum Path In 3-D Array &nbsp;&nbsp; Count binary strings with k times appearing adjacent two set bits &nbsp;&nbsp; Highway Billboard Problem &nbsp;&nbsp; Probability of getting at least K heads in N tosses of Coins &nbsp;&nbsp; Count of strings that can be formed using a, b and c under given constraints &nbsp;&nbsp; Modify array to maximize sum of adjacent differences &nbsp;&nbsp; Temple Offerings &nbsp;&nbsp; Longest alternating subsequence &nbsp;&nbsp; Minimum steps to delete a string after repeated deletion of palindrome substrings &nbsp;&nbsp; Minimum number of deletions to make a sorted sequence &nbsp;&nbsp; Count number of ways to jump to reach end &nbsp;&nbsp; Shortest Uncommon Subsequence &nbsp;&nbsp; Minimum insertions to sort an array &nbsp;&nbsp; Dynamic Programming | Building Bridges &nbsp;&nbsp; Check if any valid sequence is divisible by M &nbsp;&nbsp; Rencontres Number Hard Problems : &nbsp;&nbsp; Palindrome Partitioning &nbsp;&nbsp; Word Wrap Problem &nbsp;&nbsp; Maximum sum rectangle in a 2D matrix &nbsp;&nbsp; Matrix Chain Multiplication &nbsp;&nbsp; Longest Geometric Progression &nbsp;&nbsp; Find all combinations of k-bit numbers with n bits set where 1 &lt;= n &lt;= k in sorted order &nbsp;&nbsp; Find if a string is interleaved of two other strings &nbsp;&nbsp; Longest Arithmetic Progression &nbsp;&nbsp; Boolean Parenthesization Problem &nbsp;&nbsp; Mobile Numeric Keypad Problem &nbsp;&nbsp; Minimum Cost Polygon Triangulation &nbsp;&nbsp; How to print maximum number of A’s using given four keys &nbsp;&nbsp; Smallest length string with repeated replacement of two distinct adjacent &nbsp;&nbsp; Collect maximum points in a grid using two traversals &nbsp;&nbsp; Maximum weight transformation of a given string &nbsp;&nbsp; Find minimum possible size of array with given rules for removing elements &nbsp;&nbsp; Maximum profit by buying and selling a share at most k times &nbsp;&nbsp; Number of subsequences in a string divisible by n &nbsp;&nbsp; Maximize arr[j] – arr[i] + arr[l] – arr[k], such that i &lt; j &lt; k &lt; l &nbsp;&nbsp; A Space Optimized DP solution for 0-1 Knapsack Problem &nbsp;&nbsp; Longest repeating and non-overlapping substring &nbsp;&nbsp; All ways to add parenthesis for evaluation &nbsp;&nbsp; Number of palindromic paths in a matrix &nbsp;&nbsp; Minimum cost to sort strings using reversal operations of different costs &nbsp;&nbsp; Minimum number of elements which are not part of Increasing or decreasing subsequence in array &nbsp;&nbsp; Printing brackets in Matrix Chain Multiplication Problem &nbsp;&nbsp; Check if all people can vote on two machines &nbsp;&nbsp; Probability of Knight to remain in the chessboard &nbsp;&nbsp; Count of AP (Arithmetic Progression) Subsequences in an array &nbsp;&nbsp; Number of subsequences of the form a^i b^j c^k &nbsp;&nbsp; Count ways to increase LCS length of two strings by one &nbsp;&nbsp; Count of arrays in which all adjacent elements are such that one of them divide the another &nbsp;&nbsp; Dynamic Programming on Trees &nbsp;&nbsp; Check whether row or column swaps produce maximum size binary sub-matrix with all 1s","categories":[{"name":"alg","slug":"alg","permalink":"http://yoursite.com/categories/alg/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"},{"name":"题集","slug":"题集","permalink":"http://yoursite.com/tags/题集/"}]},{"title":"动态规划","slug":"alg/DynamicProgramming/动态规划总结","date":"2018-08-29T13:18:44.000Z","updated":"2018-08-29T13:20:51.386Z","comments":true,"path":"2018/08/29/alg/DynamicProgramming/动态规划总结/","link":"","permalink":"http://yoursite.com/2018/08/29/alg/DynamicProgramming/动态规划总结/","excerpt":"","text":"动态规划求解的一般思路： 判断问题的子结构（也可看作状态），当具有最优子结构时，动态规划可能适用。 求解重叠子问题。一个递归算法不断地调用同一问题，递归可以转化为查表从而利用子问题的解。分治法则不同，每次递归都产生新的问题。 重新构造一个最优解。 最优子结构?","categories":[{"name":"alg","slug":"alg","permalink":"http://yoursite.com/categories/alg/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"}]},{"title":"supervisor 使用","slug":"devops/supervisor_learn","date":"2018-08-29T13:15:52.434Z","updated":"2018-08-29T13:30:56.403Z","comments":true,"path":"2018/08/29/devops/supervisor_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/devops/supervisor_learn/","excerpt":"","text":"install1apt-get install -y supervisor 启动命令1/usr/bin/python /usr/bin/supervisord -c /etc/supervisor/supervisord.conf 配置安装完后的默认配置 /etc/supervisor/supervisord.conf 1234567891011121314151617181920212223242526272829; supervisor config file[unix_http_server]file=/var/run/supervisor.sock ; (the path to the socket file)chmod=0700 ; sockef file mode (default 0700)[supervisord]logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)childlogdir=/var/log/supervisor ; (&apos;AUTO&apos; child log dir, default $TEMP)environment=IPADDRESS=&quot;172.16.6.6&quot;, HOST_NAME=&quot;i-nom0vro7&quot;; the below section must remain in the config file for RPC; (supervisorctl/web interface) to work, additional interfaces may be; added by defining them in separate rpcinterface: sections[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL for a unix socket; The [include] section can just contain the &quot;files&quot; setting. This; setting can list multiple files (separated by whitespace or; newlines). It can also contain wildcards. The filenames are; interpreted as relative to this file. Included files *cannot*; include files themselves.[include]files = /etc/supervisor/conf.d/*.conf 需要监控的进程 consul 微服务守护进程 coupon_web 守护进程 coupon_gateway 守护进程 coupon_trig 守护进程 coupon_bot 守护进程 配置如下: (在 conf.d 目录下) consul 守护进程:1234567891011[program:consul] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作autorestart=True ; 程序异常退出后自动重启autostart=True ; 在 supervisord 启动的时候也自动启动redirect_stderr=True ; 把 stderr 重定向到 stdout，默认 falsecommand=consul agent -data-dir /data/consul -node=common-conpous.0.13 -bind=172.16.0.13 -join=172.16.0.210 1&gt;/data/logs/out.log 2&gt;&amp;1 ; 启动命令，与手动在命令行启动的命令是一样的user=root ; 用哪个用户启动directory=/data/caiqiu ; 程序的启动目录stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile = /data/logs/supervisord_consul.log coupon_web 守护进程:1234567891011[program:coupon_web] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作autorestart=True ; 程序异常退出后自动重启autostart=True ; 在 supervisord 启动的时候也自动启动redirect_stderr=True ; 把 stderr 重定向到 stdout，默认 falsecommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-web-1.0.0-SNAPSHOT.jar --server.port=8080 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500user=root ; 用哪个用户启动directory=/data/caiqiu ; 程序的启动目录stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/data/logs/supervisord_coupon_web.log coupon_gateway 守护进程:1234567891011[program:coupon_gateway] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作autorestart=True ; 程序异常退出后自动重启autostart=True ; 在 supervisord 启动的时候也自动启动redirect_stderr=True ; 把 stderr 重定向到 stdout，默认 falsecommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-gateway-1.0.0-SNAPSHOT.jar --server.port=9090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500user=root ; 用哪个用户启动directory=/data/caiqiu ; 程序的启动目录stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/data/logs/supervisord_coupon_gateway.log coupon_trig 守护进程:1234567891011[program:coupon_trig] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作autorestart=True ; 程序异常退出后自动重启autostart=True ; 在 supervisord 启动的时候也自动启动redirect_stderr=True ; 把 stderr 重定向到 stdout，默认 falsecommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-trig-1.0.0-SNAPSHOT.jar --server.port=8090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500user=root ; 用哪个用户启动directory=/data/caiqiu ; 程序的启动目录stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/data/logs/supervisord_coupon_trig.log coupon_bot 守护进程:1234567891011[program:coupon_bot] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作autorestart=True ; 程序异常退出后自动重启autostart=True ; 在 supervisord 启动的时候也自动启动redirect_stderr=True ; 把 stderr 重定向到 stdout，默认 falsecommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-bot-1.0.0-SNAPSHOT.jar --spring.profiles.active=dev --server.tomcat.max-thread=500user=root ; 用哪个用户启动directory=/data/caiqiu ; 程序的启动目录stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/data/logs/supervisord_coupon_bot.log supervisorctl 命令123456789101112supervisorctl status # 查看 supervisorctl 的状态# account_gateway RUNNING pid 22892, uptime 1 day, 19:17:42# account_web RUNNING pid 22912, uptime 1 day, 19:17:41# consul RUNNING pid 22849, uptime 1 day, 19:17:51supervisorctl reload # 重新载入 supervisorctl 配置, 并且使其生效supervisorctl help # 帮助文档# default commands (type help &lt;topic&gt;):# =====================================# add clear fg open quit remove restart start stop update# avail exit maintail pid reload reread shutdown status tail version","categories":[{"name":"devops","slug":"devops","permalink":"http://yoursite.com/categories/devops/"}],"tags":[{"name":"supervisor","slug":"supervisor","permalink":"http://yoursite.com/tags/supervisor/"}]},{"title":"spring aop 切向编程","slug":"backend/java/spring_aop","date":"2018-08-29T13:14:48.231Z","updated":"2018-08-29T13:26:45.498Z","comments":true,"path":"2018/08/29/backend/java/spring_aop/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/java/spring_aop/","excerpt":"","text":"概览 什么是切向编程？ 切向编程的好处 spring aop的使用 spring中类似于@Cacheable的实现 重点讲3和4 什么是切向编程？自己的理解：在一个方法前后执行某段特定功能的代码 切向编程的好处举两个例子： web应用中，需要打印接口传入的params and return result，就需要在接口前后加上log。 将数据库查询出的数据缓存到redis中（类似于@Cacheable）。 spring aop的使用关键点： 声明切面类，使用@Aspect并将类注册到IOC容器中@Component 定义切点：@Pointcut(&quot;execution(public * laboratory.controller..*.*(..))&quot;) 定义执行方法：@Before(&quot;webLog()&quot;) 切点类型@Pointcut(value = &quot;&quot;)value的类型：TOTO: 总结value类型 完整代码WebLogAspect： 1234567891011121314151617181920212223242526272829303132333435363738394041package laboratory.aop;import com.alibaba.fastjson.JSON;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;@Aspect // 1. 声明切面类@Componentpublic class WebLogAspect &#123; @Pointcut(\"execution(public * laboratory.controller..*.*(..))\") // 2. 定义切点 public void webLog()&#123; &#125; @Before(\"webLog()\") // 3. 定义执行方法 public void doBefore(JoinPoint joinPoint) &#123; // 接收到请求，记录请求内容 ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); HttpServletRequest request = attributes.getRequest(); // 记录下请求内容// logger.info(\"URL : \" + request.getRequestURL().toString());// logger.info(\"HTTP_METHOD : \" + request.getMethod());// logger.info(\"IP : \" + request.getRemoteAddr());// logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());// logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs())); &#125; @AfterReturning(returning = \"ret\", pointcut = \"webLog()\") //3. 定义执行方法 public void doAfterReturning(Object ret) &#123; System.out.println(\"resp: \" + JSON.toJSONString(ret)); &#125;&#125; FirstCache:123456789101112131415161718192021222324252627282930313233343536package laboratory.aop;import laboratory.annotation.FirstCacheAno;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.stereotype.Component;@Aspect@Componentpublic class FirstCache &#123; @Pointcut(\"@annotation(laboratory.annotation.FirstCacheAno)\") public void firstCache() &#123; &#125; @Around(\"firstCache()\") public Object aroundFirstCache(ProceedingJoinPoint proceedingJoinPoint) &#123; System.out.println(\"aroundFirstCache after....\"); MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature(); FirstCacheAno firstCache = signature.getMethod().getAnnotation(FirstCacheAno.class); System.out.println(\"firstCache cacheName: \" + firstCache.cacheName()); System.out.println(\"firstCache unless: \" + firstCache.unless()); Object ret = null; try &#123; ret = proceedingJoinPoint.proceed(); System.out.println(ret); &#125; catch (Throwable throwable) &#123; throwable.printStackTrace(); &#125; System.out.println(\"aroundFirstCache end....\"); return ret; &#125;&#125;","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"spring aop","slug":"spring-aop","permalink":"http://yoursite.com/tags/spring-aop/"}]},{"title":"Lombok原理分析与功能实现","slug":"backend/java/Lombok原理分析与功能实现","date":"2018-08-29T13:14:48.231Z","updated":"2018-08-29T13:26:00.740Z","comments":true,"path":"2018/08/29/backend/java/Lombok原理分析与功能实现/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/java/Lombok原理分析与功能实现/","excerpt":"","text":"参考：https://blog.mythsman.com/2017/12/19/1/ 原理 定义编译期的注解 利用JSR269 api(Pluggable Annotation Processing API )创建编译期的注解处理器 利用tools.jar的javac api处理AST(抽象语法树) 将功能注册进jar包 基础点 注解 JSR269 api javac api处理AST 手撸Getter实验的目的是自定义一个针对类的Getter注解，它能够读取该类的成员方法并自动生成getter方法。 创建Getter注解1234567891011package laboratory.lombokLearn;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.SOURCE)public @interface Getter &#123;&#125; 创建Getter注解的处理器基本框架123456789101112131415161718192021package laboratory.lombokLearn;import javax.annotation.processing.*;import javax.lang.model.SourceVersion;import javax.lang.model.element.TypeElement;import java.util.Set;@SupportedAnnotationTypes(\"laboratory.lombokLearn.Getter\")@SupportedSourceVersion(SourceVersion.RELEASE_8)public class GetterProcessor extends AbstractProcessor &#123; @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); &#125; @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; return true; &#125;&#125; 然后需要着重实现两个方法，init跟process。init的主要用途是通过ProcessingEnvironment来获取编译阶段的一些环境信息;process主要是实现具体逻辑的地方，也就是对AST进行处理的地方。 init 方法1234567891011121314private Messager messager;private JavacTrees trees;private TreeMaker treeMaker;private Names names;@Overridepublic synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); this.messager = processingEnv.getMessager(); this.trees = JavacTrees.instance(processingEnv); Context context = ((JavacProcessingEnvironment) processingEnv).getContext(); this.treeMaker = TreeMaker.instance(context); this.names = Names.instance(context);&#125; Messager主要是用来在编译期打log用的 JavacTrees提供了待处理的抽象语法树 TreeMaker封装了创建AST节点的一些方法 Names提供了创建标识符的方法 PROCESS方法步骤大概是下面这样： 利用roundEnv的getElementsAnnotatedWith方法过滤出被Getter这个注解标记的类，并存入set 遍历这个set里的每一个元素，并生成jCTree这个语法树 创建一个TreeTranslator，并重写其中的visitClassDef方法，这个方法处理遍历语法树得到的类定义部分jcClassDecl 创建一个jcVariableDeclList保存类的成员变量遍历jcTree的所有成员(包括成员变量和成员函数和构造函数)，过滤出其中的成员变量，并添加进jcVariableDeclList将jcVariableDeclList的所有变量转换成需要添加的getter方法，并添加进jcClassDecl的成员中调用默认的遍历方法遍历处理后的jcClassDecl 利用上面的TreeTranslator去处理jcTree summary (answer question)1. 注解的理解12@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.SOURCE) 这个是编译时运行的注解，其实我更加想知道运行时的注解，如何运作的。 2. JSR269 api 是啥？Pluggable Annotation Processing API（注解处理器） 3. AST what？1private JavacTrees trees; 这个就是语法树 1jcTree.accept(） 为类增加方法 运行时的注解我研究一下@Cacheable注解吧","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"lombok","slug":"lombok","permalink":"http://yoursite.com/tags/lombok/"},{"name":"原理","slug":"原理","permalink":"http://yoursite.com/tags/原理/"}]},{"title":"搭建自己的私有网络","slug":"block_chain/搭建自己的私有网络","date":"2018-08-29T13:14:48.228Z","updated":"2018-08-29T13:24:21.195Z","comments":true,"path":"2018/08/29/block_chain/搭建自己的私有网络/","link":"","permalink":"http://yoursite.com/2018/08/29/block_chain/搭建自己的私有网络/","excerpt":"","text":"目标 创建私有的以太网 在私有网部署一个简单的智能合约 使用该公约发起交易 注意事项： 机子内存要2G及以上 setp1: 安装环境记录坑：通过 apt-get install geth 安装的环境只有 geth 命令，无 bootnode, evm, disasm, rlpdump, ethtest这些命令。 Ubuntu安装方式：1234sudo apt-get install software-properties-commonsudo add-apt-repository -y ppa:ethereum/ethereumsudo apt-get updatesudo apt-get install ethereum 可以选择源码安装：(前提是需要 golang &gt; 1.7)123git clone https://github.com/ethereum/go-ethereumcd go-ethereummake geth step2: 创建创世块创世块是区块链的第一个块并且参数被指定在genesis.json文件中，内容如下：12345678910111213141516171819202122&#123;\"config\": &#123; \"chainId\": 15, \"homesteadBlock\": 0, \"eip155Block\": 0, \"eip158Block\": 0 &#125;, \"alloc\" : &#123; \"0x0000000000000000000000000000000000000001\": &#123;\"balance\": \"111111111\"&#125;, \"0x0000000000000000000000000000000000000002\": &#123;\"balance\": \"222222222\"&#125; &#125;, \"coinbase\" : \"0x0000000000000000000000000000000000000000\", \"difficulty\" : \"0x00001\", \"extraData\" : \"\", \"gasLimit\" : \"0x2fefd8\", \"nonce\" : \"0x0000000000000107\", \"mixhash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"timestamp\" : \"0x00\"&#125; 注意： chainId=1 指向的是以太坊的主链上。因此为您的网络创建唯一的chainId非常重要，这样您的客户端就不会混淆私有区块链和主网络.为了说明和测试，将采矿难度(difficulty)设置为较低值。还要确保你指定一个唯一的随机数来开始(nonce)。alloc字段允许您使用Ether预先填充帐户。现在到您创建的genesis.json文件的目录并初始化bootnode节点，您的以太坊客户端可通过该节点加入您的专用网络并与连接到您的专用网络的其他节点进行交互。 1234cd /root/ucsfnet/datageth --datadir=learn init genesis.json bootnode --genkey=boot.key bootnode --nodekey=boot.key 没有bootnode的原因：see step1 step3: 连接到bootnode上开一个新终端：12ssh root@101.102.103.104geth --datadir=/root/ucsfnet/data --bootnodes=enode://148f3....@101.102.103.104:3031 将148f3....替换为 step2 生成的12$ bootnode --nodekey=boot.keyINFO [03-14|16:30:33] UDP listener up self=enode://c591c837ff804c4bdb6a5a8d02e5343d5f96fbf6e198aaf05f91aeb0a9b781e3b6fb95124ac8e4ee1b99ca64df2c93052c54bc02ee1dada70d38bd4a956d4ac4@[::]:30301 step4: 创建一个新账号并查询余额新开一个终端：1geth attach /root/ucsfnet/data/geth.ipc 连接到网络中：查看有哪些账户, 创建一个新账号密码为：mypassword , 查询用户余额12345678&gt; eth.accounts[]&gt; personal.newAccount(\"mypassword\")\"0x73c62b30d6dbe998313384f1c98528c1d372b075\"&gt; web3.fromWei(eth.getBalance(eth.accounts\\[0\\]), \"ether\")0 那个0x打头的就是账户地址：0x73c62b30d6dbe998313384f1c98528c1d372b075 step5: 在私链上挖矿挖矿有2目的： 需要为矿工的算力，提供gas 采矿需要将你的交易写到区块链中 1geth --datadir=/root/ucsfnet/data --mine --minerthreads=1 --etherbase=0x... etherbase 参数应该是step4中的钱包地址开始挖矿后会有一段时间加载数据，耗CPU比较严重。 step6: 开发一个简单的智能合约首先需要安装编译器：123sudo add-apt-repository ppa:ethereum/ethereumsudo apt-get updatesudo apt-get install solc 其次，创建合约，并命名为 greeter.sol 1234567891011121314151617181920212223242526contract mortal &#123;/* Define variable owner of the type address*/ address owner;/* this function is executed at initialization and sets the owner of the contract */ function mortal() &#123; owner = msg.sender; &#125;/* Function to recover the funds on the contract */ function kill() &#123; if (msg.sender == owner) selfdestruct(owner); &#125;&#125;contract greeter is mortal &#123; /* define variable greeting of the type string */ string greeting;/* this runs when the contract is executed */ function greeter(string _greeting) public &#123; greeting = &quot;UCSFnet lives!&quot;; &#125;/* main function */ function greet() constant returns (string) &#123; return greeting; &#125;&#125; 编译合约：12345solc --bin --abi -o /root/test /root/test/greeter.sol## 输出文件$ lsgreeter.abi greeter.bin greeter.sol mortal.abi mortal.bin 在编译命令行中， --bin --abi 是分别生成 EVM（Ethereum Virtual Machine：以太坊虚拟机）字节码 和 ABI（Application Binary Inferface：应用二进制接口）文件。 -o 指定生成后存放的路径 合约内容先不研究 step7: 部署GREETER合约到私网12345678910111213141516171819202122232425262728293031323334353637383940var _greeting = 'Jie lives!';var browser_ballot_sol_greeterContract = web3.eth.contract([&#123; \"constant\": false, \"inputs\": [], \"name\": \"kill\", \"outputs\": [], \"payable\": false, \"type\": \"function\"&#125;, &#123; \"constant\": true, \"inputs\": [], \"name\": \"greet\", \"outputs\": [&#123;\"name\": \"\", \"type\": \"string\"&#125;], \"payable\": false, \"type\": \"function\"&#125;, &#123;\"inputs\": [&#123;\"name\": \"_greeting\", \"type\": \"string\"&#125;], \"payable\": false, \"type\": \"constructor\"&#125;]);var browser_ballot_sol_greeter = browser_ballot_sol_greeterContract.new( _greeting, &#123; from: web3.eth.accounts[0], data: '0x6060604052341561000f57600080fd5b6040516103dd3803806103dd833981016040528080518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600190805190602001906100b99291906100c1565b505b50610166565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010257805160ff1916838001178555610130565b82800160010185558215610130579182015b8281111561012f578251825591602001919060010190610114565b5b50905061013d9190610141565b5090565b61016391905b8082111561015f576000816000905550600101610147565b5090565b90565b610268806101756000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610049578063cfae32171461005e575b600080fd5b341561005457600080fd5b61005c6100ed565b005b341561006957600080fd5b61007161017f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b25780820151818401525b602081019050610096565b50505050905090810190601f1680156100df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561017c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b610187610228565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021d5780601f106101f25761010080835404028352916020019161021d565b820191906000526020600020905b81548152906001019060200180831161020057829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a7230582069d50e4318daa30d3f74bb817c3b0cb732c4ec6a493eb108266c548906c8b6d70029', gas: '1000000' &#125;, function (e, contract) &#123; console.log(e, contract); if (typeof contract.address !== 'undefined') &#123; console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash); &#125; &#125;) 数据看着填吧，启动一个终端，连接到私链上1234ssh root@101.102.103.104 geth attach /root/ucsfnet/data/geth.ipc &gt; web3.fromWei(eth.getBalance(eth.accounts[0]), \"ether\")&gt; personal.unlockAccount(eth.accounts[0], \"mypassword\") 部署合约需要account上有余额，且account处于unlock状态下。使用下面的命令载入合约：1loadScript('myContract.js') 注意：需要有矿工挖矿保证交易被挖到将会得到如下内容：1Contract mined! address: 0xa76d017c3035dcf15e28b315477f3f19ae275433 transactionHash: 0x732e84efc03638767efc9a46738161c04d561a92cc2e631c63287e63ef38995b 这样合约就部署完成了 与合同的交换12345&gt; var abi = '[&#123;\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"&#125;,&#123;\"constant\":true,\"inputs\":[],\"name\":\"greet\",\"outputs\":[&#123;\"name\":\"\",\"type\":\"string\"&#125;],\"payable\":false,\"type\":\"function\"&#125;,&#123;\"inputs\":[&#123;\"name\":\"_greeting\",\"type\":\"string\"&#125;],\"payable\":false,\"type\":\"constructor\"&#125;]'&gt; var abi = JSON.parse(abi)&gt; var contract = web3.eth.contract(abi)&gt; var c = contract.at(\"0xa76d017c3035dcf15e28b315477f3f19ae275433\")&gt; c.greet() 会有一个输出：1UCSFnet lives! 我这输出的是：”Hello, World!” …. 博客推荐Nice low-level description of networking in Ethereum (uses the Python-based client): Setting up private network or local cluster Managing your accounts Connecting to the network The Go Ethereum client Official Ethereum command line tool documentation 参考（算是翻译）：How to create a private Ethereum network 下一个目标https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://yoursite.com/tags/blockchain/"},{"name":"以太坊","slug":"以太坊","permalink":"http://yoursite.com/tags/以太坊/"}]},{"title":"Zombie T3","slug":"block_chain/contractLearn/Zombie_Con_Ch3","date":"2018-08-29T13:14:48.227Z","updated":"2018-08-29T13:23:37.173Z","comments":true,"path":"2018/08/29/block_chain/contractLearn/Zombie_Con_Ch3/","link":"","permalink":"http://yoursite.com/2018/08/29/block_chain/contractLearn/Zombie_Con_Ch3/","excerpt":"","text":"涉及内容：智能协议的所有权，Gas的花费，代码优化，和代码安全 ch1. 智能协议的永固性在你把智能协议传上以太坊之后，它就变得不可更改, 这种永固性意味着你的代码永远不能被调整或更新。 尽量不要写死代码 ch2. Ownable ContractsOpenZeppelin库的Ownable 合约：OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。 1234567891011121314151617181920212223242526272829303132333435/** * @title Ownable * @dev The Ownable contract has an owner address, and provides basic authorization control * functions, this simplifies the implementation of &quot;user permissions&quot;. */contract Ownable &#123; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); /** * @dev The Ownable constructor sets the original `owner` of the contract to the sender * account. */ function Ownable() public &#123; owner = msg.sender; &#125; /** * @dev Throws if called by any account other than the owner. */ modifier onlyOwner() &#123; require(msg.sender == owner); _; &#125; /** * @dev Allows the current owner to transfer control of the contract to a newOwner. * @param newOwner The address to transfer ownership to. */ function transferOwnership(address newOwner) public onlyOwner &#123; require(newOwner != address(0)); OwnershipTransferred(owner, newOwner); owner = newOwner; &#125;&#125; 构造函数: function Ownable() 是一个 constructor (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。 函数修饰符：modifier onlyOwner() 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。_; 类似于 ruby 中的 yield 所以Ownable合约基本都会这么干： 合约创建，构造函数先行，将其 owner 设置为msg.sender（其部署者） 为它加上一个修饰符 onlyOwner，它会限制陌生人的访问，将访问某些函数的权限锁定在 owner 上。 允许将合约所有权转让给他人。 ch4. Gas重要概念： Gas - 驱动以太坊DApps的能源 在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 gas，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。 一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 gas 等于这个操作背后的所有运算花销的总和。 由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。 为什么要用 gas 来驱动？以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的”去中心化“ 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。 可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。 省 gas 的招数：结构封装 （Struct packing）在第1课中，我们提到除了基本版的 uint 外，还有其他变种 uint：uint8，uint16，uint32等。 通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何 gas。 除非，把 unit 绑定到 struct 里面。 如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如： 1234567891011struct NormalStruct &#123; uint a; uint b; uint c;&#125;struct MiniMe &#123; uint32 a; uint32 b; uint c;&#125; // 因为使用了结构打包，mini 比 normal 占用的空间更少NormalStruct normal = NormalStruct(10, 20, 30);MiniMe mini = MiniMe(10, 20, 30);所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct： uint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b; 前者比后者需要的gas更少，因为前者把uint32放一起了。 ch5. 时间单位Solidity 使用自己的本地时间单位。 变量 now 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。 Solidity 还包含秒(seconds)，分钟(minutes)，小时(hours)，天(days)，周(weeks) 和 年(years) 等时间单位。它们都会转换成对应的秒数放入 uint 中。所以 1分钟 就是 60，1小时是 3600（60秒×60分钟），1天是86400（24小时×60分钟×60秒），以此类推。 示例：1234567891011uint lastUpdated;// 将‘上次更新时间’ 设置为 ‘现在’function updateTimestamp() public &#123; lastUpdated = now;&#125;// 如果到上次`updateTimestamp` 超过5分钟，返回 &apos;true&apos;// 不到5分钟返回 &apos;false&apos;function fiveMinutesHavePassed() public view returns (bool) &#123; return (now &gt;= (lastUpdated + 5 minutes)); ch6. 结构体作为参数传入由于结构体的存储指针可以以参数的方式传递给一个 private 或 internal 的函数，因此结构体可以在多个函数之间相互传递。 遵循这样的语法： 123function _doStuff(Zombie storage _zombie) internal &#123; // do stuff with _zombie&#125; ch7. 公有函数和安全性你必须仔细地检查所有声明为 public 和 external的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 onlyOwner 这样的函数修饰符，用户能利用各种可能的参数去调用它们。 ch8. 进一步了解函数修饰符带参数的函数修饰符之前我们已经读过一个简单的函数修饰符了：onlyOwner。函数修饰符也可以带参数。例如： 1234567891011121314// 存储用户年龄的映射mapping (uint =&gt; uint) public age;// 限定用户年龄的修饰符modifier olderThan(uint _age, uint _userId) &#123; require(age[_userId] &gt;= _age); _;&#125;// 必须年满16周岁才允许开车 (至少在美国是这样的).// 我们可以用如下参数调用`olderThan` 修饰符:function driveCar(uint _userId) public olderThan(16, _userId) &#123; // 其余的程序逻辑&#125; 看到了吧， olderThan 修饰符可以像函数一样接收参数，是“宿主”函数 driveCar 把参数传递给它的修饰符的。 ch10. 利用 ‘View’ 函数节省 Gas“view” 函数不花 “gas”当玩家从外部调用一个view函数，是不需要支付一分 gas 的。 这是因为 view 函数不会真正改变区块链上的任何数据 - 它们只是读取。因此用 view 标记一个函数，意味着告诉 web3.js，运行这个函数只需要查询你的本地以太坊节点，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。 稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“external view 声明，就能为你的玩家减少在 DApp 中 gas 用量。 注意：如果一个 view 函数在另一个函数的内部被调用，而调用函数与 view 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 view 的函数只有在外部调用时才是免费的。 ch11. 存储非常昂贵Solidity 使用storage(存储)是相当昂贵的，”写入“操作尤其贵。 这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！ 为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 memory(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。 在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了external view的函数，遍历比 storage 要便宜太多，因为 view 函数不会产生任何花销。 （gas可是真金白银啊！）。 我们将在下一章讨论for循环，现在我们来看一下看如何如何在内存中声明数组。 在内存中声明数组在数组后面加上 memory关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 storage 的做法相比，内存运算可以大大节省gas开销 – 把这数组放在view里用，完全不用花钱。 以下是申明一个内存数组的例子： 12345678910function getArray() external pure returns(uint[]) &#123; // 初始化一个长度为3的内存数组 uint[] memory values = new uint[](3); // 赋值 values.push(1); values.push(2); values.push(3); // 返回数组 return values;&#125; 这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 for 循环结合的做法。 注意：内存数组 必须 用长度参数（在本例中为3）创建。目前不支持 array.push()之类的方法调整数组大小，在未来的版本可能会支持长度修改。 使用 for 循环for循环的语法在 Solidity 和 JavaScript 中类似。 来看一个创建偶数数组的例子：12345678910111213141516function getEvens() pure external returns(uint[]) &#123; uint[] memory evens = new uint[](5); // 在新数组中记录序列号 uint counter = 0; // 在循环从1迭代到10： for (uint i = 1; i &lt;= 10; i++) &#123; // 如果 `i` 是偶数... if (i % 2 == 0) &#123; // 把它加入偶数数组 evens[counter] = i; //索引加一， 指向下一个空的‘even’ counter++; &#125; &#125; return evens;&#125; 这个函数将返回一个形为 [2,4,6,8,10] 的数组。","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://yoursite.com/tags/blockchain/"},{"name":"智能合约","slug":"智能合约","permalink":"http://yoursite.com/tags/智能合约/"}]},{"title":"","slug":"block_chain/在私有网络上搭建3个以上节点","date":"2018-08-29T13:14:48.227Z","updated":"2018-08-29T13:14:48.227Z","comments":true,"path":"2018/08/29/block_chain/在私有网络上搭建3个以上节点/","link":"","permalink":"http://yoursite.com/2018/08/29/block_chain/在私有网络上搭建3个以上节点/","excerpt":"","text":"在私有网络上搭建3个以上节点Step 1: 创建创世块Step 2: 删除旧数据Step 3: 重新初始化创世块Step 4: 发现每个节点的enode地址Step 5: 在每个节点上创建static-nodes.json文件Step 6: 启动私人网络Step 7: 在私网上挖掘","categories":[],"tags":[]},{"title":"redis ops learn","slug":"backend/go/redis/redis_start_learn","date":"2018-08-29T13:07:26.000Z","updated":"2018-08-29T13:07:54.323Z","comments":true,"path":"2018/08/29/backend/go/redis/redis_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/go/redis/redis_start_learn/","excerpt":"","text":"连接测试123456789101112131415161718192021222324package mainimport ( \"github.com/go-redis/redis\" \"fmt\" \"log\")func main() &#123; client := redis.NewClient(&amp;redis.Options&#123; Addr: \"localhost:6379\", Password: \"\", //默认空密码 DB: 0, //使用默认数据库 &#125;) defer client.Close() //最后关闭 pong, err := client.Ping().Result() if err != nil &#123; log.Fatal(err) &#125; fmt.Println(\"Connected result: \", pong)&#125; ops: strings12345678910// ops: strings//// setclient.Set(\"hello\", \"hello redis\",0) //忽略错误//// get stringstr := client.Get(\"hello\")fmt.Println(str)//// del stringclient.Del(\"strtest\") ops: lists1234567891011// ops: lists//// pushclient.LPush(\"list\",\"one\",\"two\",\"three\") //rpush则在尾部插入//// rm, popclient.LRem(\"list\",2,\"three\") //删除list中前2个value为 ‘three’的元素client.LPop(\"list\") //删除头部的值，同理RPop删除尾部的值。// rangelist, _ := client.LRange(\"list\", 0, 2).Result()fmt.Println(\"List: \", list) ops: hashes1234567891011121314151617181920// hashes//// setuser := make(map[string]interface&#123;&#125;)user[\"name\"] = \"jim\"user[\"gender\"] = \"man\"user[\"age\"] = 23client.HMSet(\"user\",user)//// setclient.HSet(\"user\", \"name\",\"tom\")//// getname := client.HGet(\"user\",\"name\")fmt.Print(name)//// getAllhash, _ := client.HGetAll(\"user\").Result()for k, v:= range hash&#123; fmt.Printf(\"key: %v, value: %v \",k, v)&#125; 参考: https://www.jianshu.com/p/4045a3721b3c","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"},{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"grpc start learn","slug":"backend/go/grpc/grpc_start_learn","date":"2018-08-29T12:21:53.000Z","updated":"2018-08-29T12:22:49.760Z","comments":true,"path":"2018/08/29/backend/go/grpc/grpc_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/go/grpc/grpc_start_learn/","excerpt":"","text":"ex helloworld start基本流程建立流程: 建 proto3 文件, 定义 service service 开发 client 开发 1. proto 文件123456789101112131415// The greeting service definition.service Greeter &#123; // Sends a greeting rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;&#125;// The request message containing the user's name.message HelloRequest &#123; string name = 1;&#125;// The response message containing the greetingsmessage HelloReply &#123; string message = 1;&#125; 定义了一个 service Greeter , 参数: SayHello, return: HelloReply 2. service 开发1234567891011121314151617181920212223242526const ( port = \":50051\")// server is used to implement helloworld.GreeterServer.type server struct&#123;&#125;// 实现 helloworld.GreeterServer 方法// SayHello implements helloworld.GreeterServerfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) &#123; return &amp;pb.HelloReply&#123;Message: \"Hello \" + in.Name&#125;, nil&#125;func main() &#123; lis, err := net.Listen(\"tcp\", port) // 开启监听 if err != nil &#123; log.Fatalf(\"failed to listen: %v\", err) &#125; s := grpc.NewServer() // 建一个 grpc Server pb.RegisterGreeterServer(s, &amp;server&#123;&#125;) // 将 RegisterGreeterServer 服务绑定到 grpc 上 // Register reflection service on gRPC server. reflection.Register(s) // 将服务注册到 rpc 上 if err := s.Serve(lis); err != nil &#123; // s.Serve(lis) 是将 grpc 服务绑定监听端口 log.Fatalf(\"failed to serve: %v\", err) &#125;&#125; 流程: 开一个监听端口 建立一个 rpc 服务 将服务绑定到 rpc 上 将服务注册到 rpc 上 绑定 grpc 服务 和 端口监听 3. client 使用 grpc 服务123456789101112131415161718192021222324252627282930313233343536373839package mainimport ( \"log\" \"os\" \"time\" \"golang.org/x/net/context\" \"google.golang.org/grpc\" pb \"google.golang.org/grpc/examples/helloworld/helloworld\")const ( address = \"localhost:50051\" defaultName = \"jie\")func main() &#123; // Set up a connection to the server. conn, err := grpc.Dial(address, grpc.WithInsecure()) // 创建客户端 if err != nil &#123; log.Fatalf(\"did not connect: %v\", err) &#125; defer conn.Close() // 延迟关闭连接 c := pb.NewGreeterClient(conn) // 新建一个Greeter连接客户端 // Contact the server and print out its response. name := defaultName if len(os.Args) &gt; 1 &#123; name = os.Args[1] &#125; ctx, cancel := context.WithTimeout(context.Background(), time.Second) // 设置超时 时间 defer cancel() r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;) // 使用客户端调用远程方法 if err != nil &#123; log.Fatalf(\"could not greet: %v\", err) &#125; log.Printf(\"Greeting: %s\", r.Message)&#125; 流程: 创建客户端 新建一个Greeter连接客户端 设置超时 时间 使用客户端调用远程方法 cloes客户端连接 and cancel() 总结:","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"},{"name":"grpc","slug":"grpc","permalink":"http://yoursite.com/tags/grpc/"}]},{"title":"goose learn start","slug":"backend/go/goose/goose_start_learn","date":"2018-08-29T12:12:00.000Z","updated":"2018-08-29T12:13:18.646Z","comments":true,"path":"2018/08/29/backend/go/goose/goose_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/go/goose/goose_start_learn/","excerpt":"","text":"what goose goose is a database migration tool.You can manage your database’s evolution by creating incremental SQL or Go scripts. install这个前提是需要安装 golang, 并会就 goose 命令生成到 $GOPATH/bin 目录下.1$ go get bitbucket.org/liamstask/goose/cmd/goose Usage12345678910111213141516171819202122$ goosegoose is a database migration management system for Go projects.Usage: goose [options] &lt;subcommand&gt; [subcommand options]Options: -env string which DB environment to use (default \"development\") -path string folder containing db info (default \"db\") -pgschema string which postgres-schema to migrate (default = none)Commands: up Migrate the DB to the most recent version available down Roll back the version by 1 redo Re-run the latest migration status dump the migration status for the current DB create Create the scaffolding for a new migration dbversion Print the current version of the database create创建一个新的 migration , 这个创建的是 go migration1goose create AddSomeColumns 如果是创建 sql migration 的话, 在后边加个 sql 即可.1goose create AddSomeColumns sql up应用所有可用的 migrations 1goose up down从当前版本回滚单个 migrations1goose down redo回滚最近应用的 migrations ，然后再次运行它。 1goose redo status打印所有 migrations 的状态： 1goose status dbversion1goose dbversion 个人实验数据配置如下:目录结构: jieLearn/├── dbconf.yml└── migrations ├── 20180829163647_jieTest.sql └── 20180829165529_addC4Col.sql 12345$ cat dbconf.ymldevelopment: driver: mysql open: root:password@tcp(127.0.0.1:3306)/jie_test?timeout=200ms&amp;parseTime=true&amp;loc=Local 123456789101112131415161718192021222324252627282930313233$ cat jieLearn/migrations/20180829163647_jieTest.sql-- +goose Up-- SQL in section 'Up' is executed when this migration is appliedCREATE TABLE `jie_test`.`test_table` ( `c1` INT NOT NULL, `c2` VARCHAR(45) NULL, `c3` VARCHAR(45) NULL, PRIMARY KEY (`c1`));-- +goose Down-- SQL section 'Down' is executed when this migration is rolled backDROP TABLE `jie_test`.`test_table`;$ cat jieLearn/migrations/20180829165529_addC4Col.sql-- +goose Up-- SQL in section 'Up' is executed when this migration is appliedALTER TABLE `jie_test`.`test_table`ADD COLUMN `c4` VARCHAR(45) NULL AFTER `c3`;-- +goose Down-- SQL section 'Down' is executed when this migration is rolled backALTER TABLE `jie_test`.`test_table`DROP COLUMN `c4`;$ goose -path \"jieLearn\" up$ goose -path \"jieLearn\" down 数据库new table: goose_db_version, test_table goose_db_version: content1234561 0 1 2018-08-29 08:33:232 20180829163647 1 2018-08-29 08:33:233 20180829163647 0 2018-08-29 08:34:534 20180829163647 1 2018-08-29 08:35:355 20180829165529 1 2018-08-29 08:42:396 20180829165529 0 2018-08-29 08:43:00 参考: https://bitbucket.org/liamstask/goose","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"},{"name":"goose","slug":"goose","permalink":"http://yoursite.com/tags/goose/"}]},{"title":"Build a Simple Database - Introduction and Setting up the REPL","slug":"build_own_x/data_base/build_simple_database/p1_introduction_and_setting_up_the_REPL","date":"2018-05-17T11:59:57.000Z","updated":"2018-08-29T13:39:50.089Z","comments":true,"path":"2018/05/17/build_own_x/data_base/build_simple_database/p1_introduction_and_setting_up_the_REPL/","link":"","permalink":"http://yoursite.com/2018/05/17/build_own_x/data_base/build_simple_database/p1_introduction_and_setting_up_the_REPL/","excerpt":"","text":"Part 1 - Introduction and Setting up the REPLSqliteThere’s lots of documentation of sqlite internals on their website, plus I’ve got a copy of SQLite Database System: Design and Implementation. sqlite architecture (https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki) 分成前后端: 前端部分: tokenizer parser code generator 后端部分: virtual machine B-tree pager os interface A journey of a thousand miles begins with a single step(千里之行始于足下), so let’s start with something a little more straightforward: the REPL. REPL: read-execute-print 12345678910~ sqlite3SQLite version 3.16.0 2016-11-04 19:09:39Enter \".help\" for usage hints.Connected to a transient in-memory database.Use \".open FILENAME\" to reopen on a persistent database.sqlite&gt; create table users (id int, username varchar(255), email varchar(255));sqlite&gt; .tablesuserssqlite&gt; .exit~","categories":[{"name":"build-own-x","slug":"build-own-x","permalink":"http://yoursite.com/categories/build-own-x/"}],"tags":[{"name":"database","slug":"database","permalink":"http://yoursite.com/tags/database/"},{"name":"db原理","slug":"db原理","permalink":"http://yoursite.com/tags/db原理/"}]},{"title":"Build a Simple Database - 模块功能概述","slug":"build_own_x/data_base/build_simple_database/模块功能概述","date":"2018-05-17T11:59:57.000Z","updated":"2018-08-29T13:39:43.199Z","comments":true,"path":"2018/05/17/build_own_x/data_base/build_simple_database/模块功能概述/","link":"","permalink":"http://yoursite.com/2018/05/17/build_own_x/data_base/build_simple_database/模块功能概述/","excerpt":"","text":"sqlite architecture (https://www.sqlite.org/arch.html) 小结: core: 主要的构成模块: interface, sqlCommand Processor, Virtual Machine SQL Compiler: Tokenizer, Parser, Code Generator Backend: B-Tree, Pager, OS Interface 翻译:(https://www.sqlite.org/arch.html) 概览SQLite的工作原理是将SQL文本编译为字节码，然后使用虚拟机运行该字节码。 sqlite3_prepare_v2（）和相关接口充当用于将SQL文本转换为字节码的编译器。 sqlite3_stmt对象是用于实现单个SQL语句的单个字节码程序的容器。 sqlite3_step（）接口将一个字节码程序传递给虚拟机，并运行该程序直到它完成，或者形成一行结果返回，或者发生致命错误或中断。 Interface许多C语言接口可以在源文件main.c，legacy.c和vdbeapi.c中找到，尽管一些例程分散在其他文件中，在这些文件中它们可以访问具有文件范围的数据结构。sqlite3_get_table（）例程在table.c中实现。 sqlite3_mprintf（）例程在printf.c中找到。 sqlite3_complete（）接口位于tokenize.c中。 TCL接口由tclsqlite.c实现。 为避免名称冲突，SQLite库中的所有外部符号都以前缀sqlite3开头。那些用于外部使用的符号（换句话说，那些构成SQLite API的符号）会添加一个下划线，因此以sqlite3_开头。扩展API有时会在下划线之前添加扩展名;例如：sqlite3rbu_或sqlite3session_。 Tokenizer当包含SQL语句的字符串要被评估时，它首先被发送到标记器。标记器将SQL文本分解为标记并将这些标记逐个传递给解析器。标记器是在文件tokenize.c中手动编码的 请注意，在此设计中，标记器调用解析器。熟悉YACC和BISON的人可能习惯于以相反的方式做事 - 让解析器调用标记器。不过，令牌分析器调用分析器会更好，因为它可以做成线程安全的并且运行速度更快。 Parser解析器根据其上下文为令牌分配含义。 SQLite的解析器是使用Lemon解析器生成器生成的。Lemon和YACC / BISON一样工作，但它使用了不太容易出错的不同输入语法。Lemon还生成一个可重入且线程安全的解析器。Lemon定义了非终端析构函数的概念，以便在遇到语法错误时不会泄漏内存。驱动Lemon并定义SQLite可理解的SQL语言的语法文件可在parse.y中找到。 因为Lemon是一个通常在开发机器上找不到的程序，Lemon的完整源代码（只有一个C文件）包含在SQLite分发的“tool”子目录中。 Code Generator解析器将令牌组装成解析树之后，代码生成器运行以分析解析器树并生成执行SQL语句工作的字节码。准备好的语句对象是这个字节码的容器。代码生成器中有许多文件，其中包括：attach.c，auth.c，build.c，delete.c，expr.c，insert.c，pragma.c，select.c，trigger.c，update.c ，vacuum.c，where.c，wherecode.c和whereexpr.c。在这些文件中，大部分严重的魔法都是在这里发生的。 expr.c处理表达式的代码生成。其中* .c处理SELECT，UPDATE和DELETE语句中WHERE子句的代码生成。文件attach.c，delete.c，insert.c，select.c，trigger.c update.c和vacuum.c处理具有相同名称的SQL语句的代码生成。 （这些文件中的每一个都根据需要调用expr.c和where.c中的例程。）所有其他SQL语句都由build.c编码。 auth.c文件实现sqlite3_set_authorizer（）的功能 代码生成器，特别是* .c和select.c中的逻辑有时称为查询规划器。对于任何特定的SQL语句，可能有数百，数千或数百万种不同的算法来计算答案。查询计划员是一个AI，致力于从数百万个选择中选择最佳算法。 Bytecode Engine由代码生成器创建的字节码程序由虚拟机运行。 虚拟机本身完全包含在单个源文件vdbe.c中。 vdbe.h头文件定义了虚拟机和SQLite库的其余部分之间的接口，vdbeInt.h定义了虚拟机本身专用的结构和接口。其他各种vdbe * .c文件都是虚拟机的助手。 vdbeaux.c文件包含虚拟机使用的实用程序以及库的其余部分用于构建VM程序的接口模块。 vdbeapi.c文件包含虚拟机的外部接口，如sqlite3_bind_int（）和sqlite3_step（）。各个值（字符串，整数，浮点数和BLOB）存储在由vdbemem.c实现的名为“Mem”的内部对象中。 SQLite使用C语言例程的回调来实现SQL函数。即使内置的SQL函数也是这样实现的。大多数内置的SQL函数（例如：abs（），count（），substr（）等）都可以在func.c源文件中找到。日期和时间转换函数可在date.c中找到。一些函数如coalesce（）和typeof（）直接由代码生成器实现为字节码。 B-TreeSQLite数据库使用btree.c源文件中的B-tree实现在磁盘上进行维护。数据库中的每个表和索引都使用单独的B树。所有B树都存储在同一个磁盘文件中。文件格式细节稳定且定义明确，并保证向前兼容。 B树子系统和SQLite库的其余部分的接口由头文件btree.h定义。 Page CacheB树模块以固定大小的页面从磁盘请求信息。默认的page_size是4096字节，但可以是512到65536字节之间的任意两个幂。页面缓存负责读取，写入和缓存这些页面。页面缓存还提供了回滚和原子提交抽象，并负责锁定数据库文件。 B树驱动程序请求页面缓存中的特定页面，并在需要修改页面或提交或回滚更改时通知页面缓存。页面缓存处理了确保请求被快速，安全和有效地处理的所有细节. 主页面缓存实现在pager.c文件中。 WAL模式逻辑位于单独的wal.c中。内存中缓存由pcache.c和pcache1.c文件实现。页面缓存子系统和SQLite其余部分之间的接口由头文件pager.h定义。 ###OS Interface 为了提供跨操作系统的可移植性，SQLite使用称为VFS的抽象对象。每个VFS都提供了打开，读取，写入和关闭磁盘上的文件以及执行其他特定于操作系统的任务（如查找当前时间或获取随机性以初始化内置伪随机数生成器的方法）。 SQLite当前为unix（在os_unix.c文件中）和Windows（在os_win.c文件中）提供了VFSes。 Utilities内存分配，无格式字符串比较例程，便携式文本到数字转换例程以及其他实用程序位于util.c中。解析器使用的符号表由散列表中的哈希表维护。 utf.c源文件包含Unicode转换子例程。 SQLite在printf.c中有它自己的printf（）（有一些扩展）的私有实现，在random.c中有它自己的伪随机数生成器（PRNG）。 总结:sqlite(数据库)将数据持久化,并将其做到了极致吧.(引人深思) 整体结构, 主要分成三部分: 1. core, 2. SQL Compiler, 3. Backend 其主要流程也相当清晰: interface -&gt; sqlCommand Processor -&gt; Virtual Machine","categories":[{"name":"build-own-x","slug":"build-own-x","permalink":"http://yoursite.com/categories/build-own-x/"}],"tags":[{"name":"database","slug":"database","permalink":"http://yoursite.com/tags/database/"},{"name":"db原理","slug":"db原理","permalink":"http://yoursite.com/tags/db原理/"}]},{"title":"Dual pivot Quicksort","slug":"alg/sorting/Dual_pivot_Quicksort","date":"2018-04-27T06:55:52.000Z","updated":"2018-08-29T13:21:32.071Z","comments":true,"path":"2018/04/27/alg/sorting/Dual_pivot_Quicksort/","link":"","permalink":"http://yoursite.com/2018/04/27/alg/sorting/Dual_pivot_Quicksort/","excerpt":"","text":"time: 2018-04-27 14:55:52 参考：https://www.geeksforgeeks.org/dual-pivot-quicksort/ The idea of dual pivot quick sort is to take two pivots, one in the left end of the array and the second, in the right end of the array. The left pivot must be less than or equal to the right pivot, so we swap them if necessary. Then, we begin partitioning the array into three parts: in the first part, all elements will be less than the left pivot, in the second part all elements will be greater or equal to the left pivot and also will be less than or equal to the right pivot, and in the third part all elements will be greater than the right pivot. Then, we shift the two pivots to their appropriate positions as we see in the below bar, and after that we begin quicksorting these three parts recursively, using this method. Dual pivot quick sort is a little bit faster than the original single pivot quicksort.But still, the worst case will remain O(n^2) when the array is already sorted in an increasing or decreasing order. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384// C program to implement dual pivot QuickSort#include &lt;stdio.h&gt;int partition(int* arr, int low, int high, int* lp);void swap(int* a, int* b)&#123; int temp = *a; *a = *b; *b = temp;&#125;void DualPivotQuickSort(int* arr, int low, int high)&#123; if (low &lt; high) &#123; // lp means left pivot, and rp means right pivot. int lp, rp; rp = partition(arr, low, high, &amp;lp); DualPivotQuickSort(arr, low, lp - 1); DualPivotQuickSort(arr, lp + 1, rp - 1); DualPivotQuickSort(arr, rp + 1, high); &#125;&#125;int partition(int* arr, int low, int high, int* lp)&#123; printf(\"------- begin partition --------\\n\"); if (arr[low] &gt; arr[high]) swap(&amp;arr[low], &amp;arr[high]); // p is the left pivot, and q is the right pivot. int j = low + 1,g = high - 1; int k = low + 1, p = arr[low], q = arr[high]; while (k &lt;= g) &#123; printf(\"j: %d value: %d, g: %d value: %d, k: %d value: %d\\n\", j, arr[j], g, arr[g], k, arr[k]); // if elements are less than the left pivot if (arr[k] &lt; p) &#123; swap(&amp;arr[k], &amp;arr[j]); j++; &#125; // if elements are greater than or equal // to the right pivot else if (arr[k] &gt;= q) &#123; while (arr[g] &gt; q &amp;&amp; k &lt; g) g--; swap(&amp;arr[k], &amp;arr[g]); g--; if (arr[k] &lt; p) &#123; swap(&amp;arr[k], &amp;arr[j]); j++; &#125; &#125; k++; for (int i = 0; i &lt; 8; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); &#125; j--; g++; // bring pivots to their appropriate positions. swap(&amp;arr[low], &amp;arr[j]); swap(&amp;arr[high], &amp;arr[g]); // returning the indeces of the pivots. *lp = j; // because we cannot return two elements // from a function. printf(\"------- end partition --------\\n\"); return g;&#125;// Driver codeint main()&#123; int arr[] = &#123; 24, 8, 42, 75, 29, 77, 38, 57 &#125;; printf(\"24, 8, 42, 75, 29, 77, 38, 57\\n\"); DualPivotQuickSort(arr, 0, 7); printf(\"Sorted array: \"); for (int i = 0; i &lt; 8; i++) printf(\"%d \", arr[i]); printf(\"\\n\"); return 0;&#125; 123456789101112131415161718192024, 8, 42, 75, 29, 77, 38, 57------- begin partition --------j: 1 value: 8, g: 6 value: 38, k: 1 value: 824 8 42 75 29 77 38 57 j: 2 value: 42, g: 6 value: 38, k: 2 value: 4224 8 42 75 29 77 38 57 j: 2 value: 42, g: 6 value: 38, k: 3 value: 7524 8 42 38 29 77 75 57 j: 2 value: 42, g: 5 value: 77, k: 4 value: 2924 8 42 38 29 77 75 57 j: 2 value: 42, g: 5 value: 77, k: 5 value: 7724 8 42 38 29 77 75 57 ------- end partition --------------- begin partition --------j: 3 value: 38, g: 3 value: 38, k: 3 value: 388 24 29 38 42 57 75 77 ------- end partition --------------- begin partition --------------- end partition --------Sorted array: 8 24 29 38 42 57 75 77 总结基本的处理流程： 选定最低位和最高位作为轴 num，也就是有两个轴。 lowPoint = low + 1 和 highPoint = high - 1 作为选轴的开始点。 scanPoint = lowPoint 一直扫描到 highPoint， 如果 scanPoint_Value &lt; low_Value : swap(lowPoint_Value, scanPoint_Value) elseif (scanPoint_Value &gt;= high_Value) : swap(highPoint_Value, scanPoint_Value) 最后 swap(low_Value, (lowPoint - 1).Value), swap(high_Value, (highPoint + 1)_Value)","categories":[{"name":"alg","slug":"alg","permalink":"http://yoursite.com/categories/alg/"}],"tags":[{"name":"sorting","slug":"sorting","permalink":"http://yoursite.com/tags/sorting/"}]}]}