{"meta":{"title":"Jie-Think","subtitle":"blog","description":"jie blog","author":"jie","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-08-29T12:07:03.000Z","updated":"2018-08-29T12:11:52.380Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-29T12:11:19.000Z","updated":"2018-08-29T12:11:36.698Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"redis ops learn","slug":"backend/go/redis/redis_start_learn","date":"2018-08-29T13:07:26.000Z","updated":"2018-08-29T13:07:54.323Z","comments":true,"path":"2018/08/29/backend/go/redis/redis_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/go/redis/redis_start_learn/","excerpt":"","text":"连接测试123456789101112131415161718192021222324package mainimport ( \"github.com/go-redis/redis\" \"fmt\" \"log\")func main() &#123; client := redis.NewClient(&amp;redis.Options&#123; Addr: \"localhost:6379\", Password: \"\", //默认空密码 DB: 0, //使用默认数据库 &#125;) defer client.Close() //最后关闭 pong, err := client.Ping().Result() if err != nil &#123; log.Fatal(err) &#125; fmt.Println(\"Connected result: \", pong)&#125; ops: strings12345678910// ops: strings//// setclient.Set(\"hello\", \"hello redis\",0) //忽略错误//// get stringstr := client.Get(\"hello\")fmt.Println(str)//// del stringclient.Del(\"strtest\") ops: lists1234567891011// ops: lists//// pushclient.LPush(\"list\",\"one\",\"two\",\"three\") //rpush则在尾部插入//// rm, popclient.LRem(\"list\",2,\"three\") //删除list中前2个value为 ‘three’的元素client.LPop(\"list\") //删除头部的值，同理RPop删除尾部的值。// rangelist, _ := client.LRange(\"list\", 0, 2).Result()fmt.Println(\"List: \", list) ops: hashes1234567891011121314151617181920// hashes//// setuser := make(map[string]interface&#123;&#125;)user[\"name\"] = \"jim\"user[\"gender\"] = \"man\"user[\"age\"] = 23client.HMSet(\"user\",user)//// setclient.HSet(\"user\", \"name\",\"tom\")//// getname := client.HGet(\"user\",\"name\")fmt.Print(name)//// getAllhash, _ := client.HGetAll(\"user\").Result()for k, v:= range hash&#123; fmt.Printf(\"key: %v, value: %v \",k, v)&#125; 参考: https://www.jianshu.com/p/4045a3721b3c","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"},{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"grpc start learn","slug":"backend/go/grpc/grpc_start_learn","date":"2018-08-29T12:21:53.000Z","updated":"2018-08-29T12:22:49.760Z","comments":true,"path":"2018/08/29/backend/go/grpc/grpc_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/go/grpc/grpc_start_learn/","excerpt":"","text":"ex helloworld start基本流程建立流程: 建 proto3 文件, 定义 service service 开发 client 开发 1. proto 文件123456789101112131415// The greeting service definition.service Greeter &#123; // Sends a greeting rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;&#125;// The request message containing the user's name.message HelloRequest &#123; string name = 1;&#125;// The response message containing the greetingsmessage HelloReply &#123; string message = 1;&#125; 定义了一个 service Greeter , 参数: SayHello, return: HelloReply 2. service 开发1234567891011121314151617181920212223242526const ( port = \":50051\")// server is used to implement helloworld.GreeterServer.type server struct&#123;&#125;// 实现 helloworld.GreeterServer 方法// SayHello implements helloworld.GreeterServerfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) &#123; return &amp;pb.HelloReply&#123;Message: \"Hello \" + in.Name&#125;, nil&#125;func main() &#123; lis, err := net.Listen(\"tcp\", port) // 开启监听 if err != nil &#123; log.Fatalf(\"failed to listen: %v\", err) &#125; s := grpc.NewServer() // 建一个 grpc Server pb.RegisterGreeterServer(s, &amp;server&#123;&#125;) // 将 RegisterGreeterServer 服务绑定到 grpc 上 // Register reflection service on gRPC server. reflection.Register(s) // 将服务注册到 rpc 上 if err := s.Serve(lis); err != nil &#123; // s.Serve(lis) 是将 grpc 服务绑定监听端口 log.Fatalf(\"failed to serve: %v\", err) &#125;&#125; 流程: 开一个监听端口 建立一个 rpc 服务 将服务绑定到 rpc 上 将服务注册到 rpc 上 绑定 grpc 服务 和 端口监听 3. client 使用 grpc 服务123456789101112131415161718192021222324252627282930313233343536373839package mainimport ( \"log\" \"os\" \"time\" \"golang.org/x/net/context\" \"google.golang.org/grpc\" pb \"google.golang.org/grpc/examples/helloworld/helloworld\")const ( address = \"localhost:50051\" defaultName = \"jie\")func main() &#123; // Set up a connection to the server. conn, err := grpc.Dial(address, grpc.WithInsecure()) // 创建客户端 if err != nil &#123; log.Fatalf(\"did not connect: %v\", err) &#125; defer conn.Close() // 延迟关闭连接 c := pb.NewGreeterClient(conn) // 新建一个Greeter连接客户端 // Contact the server and print out its response. name := defaultName if len(os.Args) &gt; 1 &#123; name = os.Args[1] &#125; ctx, cancel := context.WithTimeout(context.Background(), time.Second) // 设置超时 时间 defer cancel() r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;) // 使用客户端调用远程方法 if err != nil &#123; log.Fatalf(\"could not greet: %v\", err) &#125; log.Printf(\"Greeting: %s\", r.Message)&#125; 流程: 创建客户端 新建一个Greeter连接客户端 设置超时 时间 使用客户端调用远程方法 cloes客户端连接 and cancel() 总结:","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"},{"name":"grpc","slug":"grpc","permalink":"http://yoursite.com/tags/grpc/"}]},{"title":"goose learn start","slug":"backend/go/goose/goose_start_learn","date":"2018-08-29T12:12:00.000Z","updated":"2018-08-29T12:13:18.646Z","comments":true,"path":"2018/08/29/backend/go/goose/goose_start_learn/","link":"","permalink":"http://yoursite.com/2018/08/29/backend/go/goose/goose_start_learn/","excerpt":"","text":"what goose goose is a database migration tool.You can manage your database’s evolution by creating incremental SQL or Go scripts. install这个前提是需要安装 golang, 并会就 goose 命令生成到 $GOPATH/bin 目录下.1$ go get bitbucket.org/liamstask/goose/cmd/goose Usage12345678910111213141516171819202122$ goosegoose is a database migration management system for Go projects.Usage: goose [options] &lt;subcommand&gt; [subcommand options]Options: -env string which DB environment to use (default \"development\") -path string folder containing db info (default \"db\") -pgschema string which postgres-schema to migrate (default = none)Commands: up Migrate the DB to the most recent version available down Roll back the version by 1 redo Re-run the latest migration status dump the migration status for the current DB create Create the scaffolding for a new migration dbversion Print the current version of the database create创建一个新的 migration , 这个创建的是 go migration1goose create AddSomeColumns 如果是创建 sql migration 的话, 在后边加个 sql 即可.1goose create AddSomeColumns sql up应用所有可用的 migrations 1goose up down从当前版本回滚单个 migrations1goose down redo回滚最近应用的 migrations ，然后再次运行它。 1goose redo status打印所有 migrations 的状态： 1goose status dbversion1goose dbversion 个人实验数据配置如下:目录结构: jieLearn/├── dbconf.yml└── migrations ├── 20180829163647_jieTest.sql └── 20180829165529_addC4Col.sql 12345$ cat dbconf.ymldevelopment: driver: mysql open: root:password@tcp(127.0.0.1:3306)/jie_test?timeout=200ms&amp;parseTime=true&amp;loc=Local 123456789101112131415161718192021222324252627282930313233$ cat jieLearn/migrations/20180829163647_jieTest.sql-- +goose Up-- SQL in section 'Up' is executed when this migration is appliedCREATE TABLE `jie_test`.`test_table` ( `c1` INT NOT NULL, `c2` VARCHAR(45) NULL, `c3` VARCHAR(45) NULL, PRIMARY KEY (`c1`));-- +goose Down-- SQL section 'Down' is executed when this migration is rolled backDROP TABLE `jie_test`.`test_table`;$ cat jieLearn/migrations/20180829165529_addC4Col.sql-- +goose Up-- SQL in section 'Up' is executed when this migration is appliedALTER TABLE `jie_test`.`test_table`ADD COLUMN `c4` VARCHAR(45) NULL AFTER `c3`;-- +goose Down-- SQL section 'Down' is executed when this migration is rolled backALTER TABLE `jie_test`.`test_table`DROP COLUMN `c4`;$ goose -path \"jieLearn\" up$ goose -path \"jieLearn\" down 数据库new table: goose_db_version, test_table goose_db_version: content1234561 0 1 2018-08-29 08:33:232 20180829163647 1 2018-08-29 08:33:233 20180829163647 0 2018-08-29 08:34:534 20180829163647 1 2018-08-29 08:35:355 20180829165529 1 2018-08-29 08:42:396 20180829165529 0 2018-08-29 08:43:00 参考: https://bitbucket.org/liamstask/goose","categories":[{"name":"backend","slug":"backend","permalink":"http://yoursite.com/categories/backend/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"},{"name":"goose","slug":"goose","permalink":"http://yoursite.com/tags/goose/"}]}]}